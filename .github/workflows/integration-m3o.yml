name: M3O integration tests
on: [push]

jobs:

  test:
    name: M3O integration tests
    runs-on: ubuntu-latest
    env: 
      DOCKER_BUILDKIT: '1'
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v2
      with:
        go-version: 1.13
      id: go

    - name: Check out code
      uses: actions/checkout@v2

    # http://man7.org/linux/man-pages/man1/date.1.html
    - name: Get Date
      id: get-date
      run: |
        echo "::set-output name=date::$(/bin/date -u "+%s")"
      shell: bash
    - name: Enable caching
      # We would use the official actions/cache@v2, but it doesn't save the cache if the build fails
      # caches are scoped to a branch but will also check the default branch upon cache miss
      uses: pat-s/always-upload-cache@v2.0.0 
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-m3o-${{ steps.get-date.outputs.date }}
        restore-keys: |
          ${{ runner.os }}-go-m3o-
    
    - name: Install Protoc
      uses: arduino/setup-protoc@master

    - name: Install micro
      run: |
        go install # this is used by the tests themselves
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build

    # This sets up a local docker registry to cache the images
    # Based on https://dev.to/dtinth/caching-docker-builds-in-github-actions-which-approach-is-the-fastest-a-research-18ei
    - name: Setup docker caching
      id: cache-docker
      # We would use the official actions/cache@v2, but it doesn't save the cache if the build fails
      # caches are scoped to a branch but will also check the default branch upon cache miss
      uses: pat-s/always-upload-cache@v2.0.0
      with:
        path: /tmp/docker-registry
        key: docker-registry-m3o-${{ steps.get-date.outputs.date }}
        restore-keys: |
          docker-registry-m3o-
    - name: Setup docker registry
      run: |
        docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000
    - name: Build docker image
      run: |
        docker build -f test/Dockerfile . -t micro --cache-from=localhost:5000/micro --build-arg BUILDKIT_INLINE_CACHE=1
    - name: Tag and push docker
      run: |
        docker tag micro localhost:5000/micro && docker push localhost:5000/micro || true

    - name: Test micro server
      working-directory: ./test
      run: |
          # Generate keys for JWT tests
          ssh-keygen -f /tmp/sshkey -m pkcs8 -q -N ""
          ssh-keygen -f /tmp/sshkey -e  -m pkcs8 > /tmp/sshkey.pub
          go clean -testcache && go test --tags=m3o -v ./...
      env:
        MICRO_STRIPE_API_KEY: ${{ secrets.MICRO_STRIPE_API_KEY }}
        MICRO_SENDGRID_API_KEY: ${{ secrets.MICRO_SENDGRID_API_KEY }}
        MICRO_SENDGRID_TEMPLATE_ID: ${{ secrets.MICRO_SENDGRID_TEMPLATE_ID }}
        MICRO_STRIPE_PLAN_ID: ${{ secrets.MICRO_STRIPE_PLAN_ID }}
        MICRO_EMAIL_FROM: ${{ secrets.MICRO_EMAIL_FROM }}
        MICRO_TEST_ENV: ${{ secrets.MICRO_TEST_ENV }}
        
